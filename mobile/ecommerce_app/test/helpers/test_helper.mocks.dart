// Mocks generated by Mockito 5.4.4 from annotations
// in ecommerce_app/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:convert' as _i36;
import 'dart:typed_data' as _i37;

import 'package:dartz/dartz.dart' as _i2;
import 'package:ecommerce_app/core/error/failure.dart' as _i12;
import 'package:ecommerce_app/core/platform/client.dart' as _i6;
import 'package:ecommerce_app/core/platform/network_info.dart' as _i17;
import 'package:ecommerce_app/core/usecase/usecase.dart' as _i22;
import 'package:ecommerce_app/features/auth/data/datasources/auth_local_data_source.dart'
    as _i30;
import 'package:ecommerce_app/features/auth/data/datasources/auth_remote_data_source.dart'
    as _i27;
import 'package:ecommerce_app/features/auth/data/models/authenticated_model.dart'
    as _i7;
import 'package:ecommerce_app/features/auth/data/models/login_model.dart'
    as _i28;
import 'package:ecommerce_app/features/auth/data/models/register_model.dart'
    as _i29;
import 'package:ecommerce_app/features/auth/data/models/user_data_model.dart'
    as _i8;
import 'package:ecommerce_app/features/auth/domain/entities/login_entity.dart'
    as _i24;
import 'package:ecommerce_app/features/auth/domain/entities/register_entity.dart'
    as _i25;
import 'package:ecommerce_app/features/auth/domain/entities/user_data_entity.dart'
    as _i26;
import 'package:ecommerce_app/features/auth/domain/repositories/auth_repository.dart'
    as _i9;
import 'package:ecommerce_app/features/auth/domain/usecases/get_user.dart'
    as _i35;
import 'package:ecommerce_app/features/auth/domain/usecases/login.dart' as _i32;
import 'package:ecommerce_app/features/auth/domain/usecases/logout.dart'
    as _i34;
import 'package:ecommerce_app/features/auth/domain/usecases/register.dart'
    as _i33;
import 'package:ecommerce_app/features/product/data/data_sources/local_data_source.dart'
    as _i15;
import 'package:ecommerce_app/features/product/data/data_sources/remote_data_source.dart'
    as _i14;
import 'package:ecommerce_app/features/product/data/models/product_model.dart'
    as _i3;
import 'package:ecommerce_app/features/product/domain/entities/product_entity.dart'
    as _i13;
import 'package:ecommerce_app/features/product/domain/repositories/product_repository.dart'
    as _i5;
import 'package:ecommerce_app/features/product/domain/usecases/create_product.dart'
    as _i19;
import 'package:ecommerce_app/features/product/domain/usecases/delete_product.dart'
    as _i23;
import 'package:ecommerce_app/features/product/domain/usecases/update_product.dart'
    as _i20;
import 'package:ecommerce_app/features/product/domain/usecases/view_all_product.dart'
    as _i21;
import 'package:ecommerce_app/features/product/domain/usecases/view_specific_product.dart'
    as _i18;
import 'package:http/http.dart' as _i10;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i31;
import 'package:shared_preferences/shared_preferences.dart' as _i16;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductModel_1 extends _i1.SmartFake implements _i3.ProductModel {
  _FakeProductModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_2 extends _i1.SmartFake implements Duration {
  _FakeDuration_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddressCheckResult_3 extends _i1.SmartFake
    implements _i4.AddressCheckResult {
  _FakeAddressCheckResult_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductRepository_4 extends _i1.SmartFake
    implements _i5.ProductRepository {
  _FakeProductRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpResponse_5 extends _i1.SmartFake implements _i6.HttpResponse {
  _FakeHttpResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthenticatedModel_6 extends _i1.SmartFake
    implements _i7.AuthenticatedModel {
  _FakeAuthenticatedModel_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUnit_7 extends _i1.SmartFake implements _i2.Unit {
  _FakeUnit_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserDataModel_8 extends _i1.SmartFake implements _i8.UserDataModel {
  _FakeUserDataModel_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthRepository_9 extends _i1.SmartFake
    implements _i9.AuthRepository {
  _FakeAuthRepository_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_10 extends _i1.SmartFake implements _i10.Response {
  _FakeResponse_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_11 extends _i1.SmartFake
    implements _i10.StreamedResponse {
  _FakeStreamedResponse_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i5.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>> createProduct(
          _i13.ProductEntity? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProduct,
          [product],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>>.value(
                _FakeEither_0<_i12.Failure, _i13.ProductEntity>(
          this,
          Invocation.method(
            #createProduct,
            [product],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, void>> deleteProduct(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [id],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, void>>.value(
            _FakeEither_0<_i12.Failure, void>(
          this,
          Invocation.method(
            #deleteProduct,
            [id],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, void>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>> getProduct(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [id],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>>.value(
                _FakeEither_0<_i12.Failure, _i13.ProductEntity>(
          this,
          Invocation.method(
            #getProduct,
            [id],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, List<_i13.ProductEntity>>>
      getProducts() => (super.noSuchMethod(
            Invocation.method(
              #getProducts,
              [],
            ),
            returnValue: _i11.Future<
                    _i2.Either<_i12.Failure, List<_i13.ProductEntity>>>.value(
                _FakeEither_0<_i12.Failure, List<_i13.ProductEntity>>(
              this,
              Invocation.method(
                #getProducts,
                [],
              ),
            )),
          ) as _i11.Future<_i2.Either<_i12.Failure, List<_i13.ProductEntity>>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>> updateProduct(
          _i13.ProductEntity? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [product],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>>.value(
                _FakeEither_0<_i12.Failure, _i13.ProductEntity>(
          this,
          Invocation.method(
            #updateProduct,
            [product],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>>);
}

/// A class which mocks [ProductRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRemoteDataSource extends _i1.Mock
    implements _i14.ProductRemoteDataSource {
  MockProductRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i3.ProductModel> createProduct(_i3.ProductModel? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProduct,
          [product],
        ),
        returnValue: _i11.Future<_i3.ProductModel>.value(_FakeProductModel_1(
          this,
          Invocation.method(
            #createProduct,
            [product],
          ),
        )),
      ) as _i11.Future<_i3.ProductModel>);

  @override
  _i11.Future<void> deleteProduct(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [id],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<_i3.ProductModel> getProduct(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [id],
        ),
        returnValue: _i11.Future<_i3.ProductModel>.value(_FakeProductModel_1(
          this,
          Invocation.method(
            #getProduct,
            [id],
          ),
        )),
      ) as _i11.Future<_i3.ProductModel>);

  @override
  _i11.Future<List<_i3.ProductModel>> getProducts() => (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
        ),
        returnValue:
            _i11.Future<List<_i3.ProductModel>>.value(<_i3.ProductModel>[]),
      ) as _i11.Future<List<_i3.ProductModel>>);

  @override
  _i11.Future<_i3.ProductModel> updateProduct(_i3.ProductModel? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [product],
        ),
        returnValue: _i11.Future<_i3.ProductModel>.value(_FakeProductModel_1(
          this,
          Invocation.method(
            #updateProduct,
            [product],
          ),
        )),
      ) as _i11.Future<_i3.ProductModel>);
}

/// A class which mocks [ProductLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductLocalDataSource extends _i1.Mock
    implements _i15.ProductLocalDataSource {
  MockProductLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<List<_i3.ProductModel>> getProducts() => (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
        ),
        returnValue:
            _i11.Future<List<_i3.ProductModel>>.value(<_i3.ProductModel>[]),
      ) as _i11.Future<List<_i3.ProductModel>>);

  @override
  _i11.Future<void> cacheProducts(List<_i3.ProductModel>? posts) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheProducts,
          [posts],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [InternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionChecker extends _i1.Mock
    implements _i4.InternetConnectionChecker {
  MockInternetConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get checkInterval => (super.noSuchMethod(
        Invocation.getter(#checkInterval),
        returnValue: _FakeDuration_2(
          this,
          Invocation.getter(#checkInterval),
        ),
      ) as Duration);

  @override
  Duration get checkTimeout => (super.noSuchMethod(
        Invocation.getter(#checkTimeout),
        returnValue: _FakeDuration_2(
          this,
          Invocation.getter(#checkTimeout),
        ),
      ) as Duration);

  @override
  List<_i4.AddressCheckOptions> get addresses => (super.noSuchMethod(
        Invocation.getter(#addresses),
        returnValue: <_i4.AddressCheckOptions>[],
      ) as List<_i4.AddressCheckOptions>);

  @override
  set addresses(List<_i4.AddressCheckOptions>? value) => super.noSuchMethod(
        Invocation.setter(
          #addresses,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<bool> get hasConnection => (super.noSuchMethod(
        Invocation.getter(#hasConnection),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<_i4.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i11.Future<_i4.InternetConnectionStatus>.value(
            _i4.InternetConnectionStatus.connected),
      ) as _i11.Future<_i4.InternetConnectionStatus>);

  @override
  _i11.Stream<_i4.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(
        Invocation.getter(#onStatusChange),
        returnValue: _i11.Stream<_i4.InternetConnectionStatus>.empty(),
      ) as _i11.Stream<_i4.InternetConnectionStatus>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool get isActivelyChecking => (super.noSuchMethod(
        Invocation.getter(#isActivelyChecking),
        returnValue: false,
      ) as bool);

  @override
  _i11.Future<_i4.AddressCheckResult> isHostReachable(
          _i4.AddressCheckOptions? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #isHostReachable,
          [options],
        ),
        returnValue:
            _i11.Future<_i4.AddressCheckResult>.value(_FakeAddressCheckResult_3(
          this,
          Invocation.method(
            #isHostReachable,
            [options],
          ),
        )),
      ) as _i11.Future<_i4.AddressCheckResult>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i16.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i11.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i17.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);
}

/// A class which mocks [ViewProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewProductUsecase extends _i1.Mock
    implements _i18.ViewProductUsecase {
  MockViewProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_4(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i5.ProductRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>> call(
          _i18.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>>.value(
                _FakeEither_0<_i12.Failure, _i13.ProductEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>>);
}

/// A class which mocks [CreateProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateProductUsecase extends _i1.Mock
    implements _i19.CreateProductUsecase {
  MockCreateProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_4(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i5.ProductRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>> call(
          _i19.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>>.value(
                _FakeEither_0<_i12.Failure, _i13.ProductEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>>);
}

/// A class which mocks [UpdateProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProductUsecase extends _i1.Mock
    implements _i20.UpdateProductUsecase {
  MockUpdateProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_4(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i5.ProductRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>> call(
          _i20.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>>.value(
                _FakeEither_0<_i12.Failure, _i13.ProductEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>>);
}

/// A class which mocks [ViewAllProductsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewAllProductsUsecase extends _i1.Mock
    implements _i21.ViewAllProductsUsecase {
  MockViewAllProductsUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_4(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i5.ProductRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, List<_i13.ProductEntity>>> call(
          _i22.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i11
            .Future<_i2.Either<_i12.Failure, List<_i13.ProductEntity>>>.value(
            _FakeEither_0<_i12.Failure, List<_i13.ProductEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, List<_i13.ProductEntity>>>);
}

/// A class which mocks [DeleteProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProductUsecase extends _i1.Mock
    implements _i23.DeleteProductUsecase {
  MockDeleteProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_4(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i5.ProductRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, void>> call(_i23.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, void>>.value(
            _FakeEither_0<_i12.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, void>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i6.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i6.HttpResponse> createProduct(_i3.ProductModel? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProduct,
          [product],
        ),
        returnValue: _i11.Future<_i6.HttpResponse>.value(_FakeHttpResponse_5(
          this,
          Invocation.method(
            #createProduct,
            [product],
          ),
        )),
      ) as _i11.Future<_i6.HttpResponse>);

  @override
  _i11.Future<_i6.HttpResponse> deleteProduct(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [id],
        ),
        returnValue: _i11.Future<_i6.HttpResponse>.value(_FakeHttpResponse_5(
          this,
          Invocation.method(
            #deleteProduct,
            [id],
          ),
        )),
      ) as _i11.Future<_i6.HttpResponse>);

  @override
  _i11.Future<_i6.HttpResponse> getProduct(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [id],
        ),
        returnValue: _i11.Future<_i6.HttpResponse>.value(_FakeHttpResponse_5(
          this,
          Invocation.method(
            #getProduct,
            [id],
          ),
        )),
      ) as _i11.Future<_i6.HttpResponse>);

  @override
  _i11.Future<_i6.HttpResponse> getProducts() => (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
        ),
        returnValue: _i11.Future<_i6.HttpResponse>.value(_FakeHttpResponse_5(
          this,
          Invocation.method(
            #getProducts,
            [],
          ),
        )),
      ) as _i11.Future<_i6.HttpResponse>);

  @override
  _i11.Future<_i6.HttpResponse> updateProduct(_i3.ProductModel? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [product],
        ),
        returnValue: _i11.Future<_i6.HttpResponse>.value(_FakeHttpResponse_5(
          this,
          Invocation.method(
            #updateProduct,
            [product],
          ),
        )),
      ) as _i11.Future<_i6.HttpResponse>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i9.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>> login(
          _i24.LoginEntity? loginEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [loginEntity],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #login,
            [loginEntity],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>> register(
          _i25.RegistrationEntity? registrationEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [registrationEntity],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #register,
            [registrationEntity],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i26.UserDataEntity>> getUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i26.UserDataEntity>>.value(
                _FakeEither_0<_i12.Failure, _i26.UserDataEntity>(
          this,
          Invocation.method(
            #getUser,
            [],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i26.UserDataEntity>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>> logout() =>
      (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>);
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i27.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i7.AuthenticatedModel> login(_i28.LoginModel? login_model) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [login_model],
        ),
        returnValue:
            _i11.Future<_i7.AuthenticatedModel>.value(_FakeAuthenticatedModel_6(
          this,
          Invocation.method(
            #login,
            [login_model],
          ),
        )),
      ) as _i11.Future<_i7.AuthenticatedModel>);

  @override
  _i11.Future<_i2.Unit> register(_i29.RegisterModel? register_model) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [register_model],
        ),
        returnValue: _i11.Future<_i2.Unit>.value(_FakeUnit_7(
          this,
          Invocation.method(
            #register,
            [register_model],
          ),
        )),
      ) as _i11.Future<_i2.Unit>);

  @override
  _i11.Future<_i8.UserDataModel> getUser(String? token) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [token],
        ),
        returnValue: _i11.Future<_i8.UserDataModel>.value(_FakeUserDataModel_8(
          this,
          Invocation.method(
            #getUser,
            [token],
          ),
        )),
      ) as _i11.Future<_i8.UserDataModel>);
}

/// A class which mocks [AuthLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthLocalDataSource extends _i1.Mock
    implements _i30.AuthLocalDataSource {
  MockAuthLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<String> getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i11.Future<String>.value(_i31.dummyValue<String>(
          this,
          Invocation.method(
            #getToken,
            [],
          ),
        )),
      ) as _i11.Future<String>);

  @override
  _i11.Future<_i2.Unit> cacheToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #cacheToken,
          [token],
        ),
        returnValue: _i11.Future<_i2.Unit>.value(_FakeUnit_7(
          this,
          Invocation.method(
            #cacheToken,
            [token],
          ),
        )),
      ) as _i11.Future<_i2.Unit>);

  @override
  _i11.Future<_i2.Unit> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i11.Future<_i2.Unit>.value(_FakeUnit_7(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
      ) as _i11.Future<_i2.Unit>);
}

/// A class which mocks [LoginUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUsecase extends _i1.Mock implements _i32.LoginUsecase {
  MockLoginUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_9(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i9.AuthRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>> call(
          _i32.LoginParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>);
}

/// A class which mocks [RegisterUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUsecase extends _i1.Mock implements _i33.RegisterUsecase {
  MockRegisterUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_9(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i9.AuthRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>> call(
          _i33.RegisterParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>);
}

/// A class which mocks [LogoutUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogoutUsecase extends _i1.Mock implements _i34.LogoutUsecase {
  MockLogoutUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_9(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i9.AuthRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>> call(_i22.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>);
}

/// A class which mocks [GetUserUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserUsecase extends _i1.Mock implements _i35.GetUserUsecase {
  MockGetUserUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_9(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i9.AuthRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i26.UserDataEntity>> call(
          _i22.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i26.UserDataEntity>>.value(
                _FakeEither_0<_i12.Failure, _i26.UserDataEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i26.UserDataEntity>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i10.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i10.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_10(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_10(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i36.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_10(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i36.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_10(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i36.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_10(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i36.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_10(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<String>.value(_i31.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<String>);

  @override
  _i11.Future<_i37.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i37.Uint8List>.value(_i37.Uint8List(0)),
      ) as _i11.Future<_i37.Uint8List>);

  @override
  _i11.Future<_i10.StreamedResponse> send(_i10.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i11.Future<_i10.StreamedResponse>.value(_FakeStreamedResponse_11(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i11.Future<_i10.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
